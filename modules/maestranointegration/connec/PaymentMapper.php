<?php

/**
* Map Connec Invoice representation to/from Prestashop Invoice
*/

class PaymentMapper extends BaseMapper {
	
	
	public function __construct() 
	{
		parent::__construct();

		$this->connec_entity_name = 'Payment';
        $this->local_entity_name = 'Payments';
        $this->connec_resource_name = 'payments';
        $this->connec_resource_endpoint = 'payments';
        
        $this->payment_method_mapping_reverse = array(
														'ccsave' => 'CC', 
														'Cash on delivery (COD)' => 'COD'
												);
	}
	
	// Return the Product local id
	protected function getId($payment) 
	{
		return $payment['paymentCC']->id;
	}
	
	// Return a local Product by id
	protected function loadModelById($local_id) 
	{

	}
	
	// Map the Connec resource attributes onto the Prestashop
	protected function mapConnecResourceToModel($payment_hash, $payment) 
	{
		// Not saved locally, one way to connec!	

	}
	
	// Map the Prestashop Product to a Connec resource hash
	protected function mapModelToConnecResource($payment) 
	{
		$payment_hash = array();
		
		$paymentObj = $payment['paymentCC'];
		$cart       = $payment['cart'];
		
        $payment_hash['type'] = 'CUSTOMER';
        
        // Missing payment lines are considered as deleted by Connec!
        $payment_hash['opts'] = array('sparse' => false);
        
        // Map the Customer
        $customerMnoIdMap = MnoIdMap::findMnoIdMapByLocalIdAndEntityName($cart->id_customer, 'CUSTOMERS');
        $payment_hash['person_id'] = $customerMnoIdMap['mno_entity_guid'];
        
        // Load the Customer Data
        $customerInfo = $this->loadCustomerByID($cart->id_customer);
                
        // Load the Sales and Order ID
        $idsData = $this->getInvoiceOrderID($paymentObj->id, $paymentObj->order_reference);
                
                            
        $payment_hash['payment_reference'] = $paymentObj->order_reference;        
		
		/////////////////////
		$payment_hash['private_note'] = 'Generated by Prestashop\nPayment for order #' . $idsData['id_order'] . " (" . $customerInfo['firstname'] . " " . $customerInfo['lastname'] .  ")";			
		$payment_hash['total_amount'] = $paymentObj->amount;
		
		//get Currecy Code		
		$currecy_code = $this->getCurrencyCode($paymentObj->id_currency);	
        $payment_hash['currency'] = $currecy_code['iso_code'];
        
        $payment_method = $this->payment_method_mapping_reverse[ $paymentObj->payment_method ];	
        $payment_hash['payment_method'] = array('code' => $payment_method);
        
        // Map the Invoice
        if($idsData['id_order_invoice'] > 0){
			 $invoiceMnoIdMap = MnoIdMap::findMnoIdMapByLocalIdAndEntityName($idsData['id_order_invoice'], 'INVOICE');			 
			 $linked_transaction = array('id' => $invoiceMnoIdMap['mno_entity_guid'], 'class' => 'Invoice');
		}
		else{
			// Map the Sales Order
			$orderMnoIdMap = MnoIdMap::findMnoIdMapByLocalIdAndEntityName($idsData['id_order'], 'SALESORDERS');
			$linked_transaction = array('id' => $orderMnoIdMap['mno_entity_guid'], 'class' => 'SalesOrder');
		}
		
		$payment_line = array(
          'line_number' => 1,
          'amount' => $paymentObj->amount,
          'status' => 'ACTIVE',
          'linked_transactions' => array(0 => $linked_transaction)
        );
        $payment_hash['payment_lines'] = array(0 => $payment_line);
        
        return $payment_hash;
        	
	}
	
	// get the customer info from ID
	public function loadCustomerByID($customer_id)
	{
		$sql = "SELECT * FROM "._DB_PREFIX_."customer WHERE id_customer = '".pSQL($customer_id)."'";
		if ($row = Db::getInstance()->getRow($sql)){			
			return $row;
		}		
	}
	
	// get the Currency code from id_currency
	public function getCurrencyCode($id_currency)
	{
		$sql = "SELECT iso_code FROM "._DB_PREFIX_."currency WHERE id_currency = '".pSQL($id_currency)."'";
		if ($row = Db::getInstance()->getRow($sql)){						
			return $row;
		}			
	}	
	
		
	public function getInvoiceOrderID($payment_id, $reference)
	{ 
		$result = array();
		//$sql = "SELECT * FROM "._DB_PREFIX_."order_invoice_payment WHERE id_order_payment = '".pSQL($payment_id)."'";		
		$sql = "SELECT i.id_order_invoice,i.id_order FROM "._DB_PREFIX_."order_invoice i INNER JOIN "._DB_PREFIX_."orders o ON i.id_order = o.id_order  
				WHERE o.reference = '".pSQL($payment_id)."'";		
		if ($row = Db::getInstance()->getRow($sql)){							
			$result['id_order_invoice'] = $row['id_order_invoice'];			
			$result['id_order'] = $row['id_order'];			
		}
		else{
			$getOrderId = "SELECT * FROM "._DB_PREFIX_."orders WHERE reference = '".pSQL($reference)."'";		
			if ($orderRow = Db::getInstance()->getRow($getOrderId)){						
				$result['id_order'] = $orderRow['id_order'];
				$result['id_order_invoice'] = 0;
			}
		}		
			
		return $result;
	}
	
	
	
}
